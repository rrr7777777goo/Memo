자바의 특징
- 플랫폼 독립적 (운영체제에 따라 코드를 재작성하지 않아도 된다)
- 객차 지향적 (절차 지향적 언어에 비해 생산성이 높고 보안성이 높다)

자바 소스 코드(.java) => 자바 컴파일러 => 바이트 코드(.class) => 윈도우 JVM or 리눅스 JVM

자바 활용도
웹 애플리케이션, 모바일 ..., 엔터프라이즈 ..., 웹/앱 서버 등

자바 플랫폼
Java SE(Standard Edition) - 기본 개발 환경
Java EE(Enterprise Edition) - 서버 기반 프로그램 개발 환경
Java ME(Micro Edition) - 모바일, 임베디드 시스템 개발 환경

변수
- 데이터를 저장하는 메모리 공간에 붙여주는 이름
int age = 20;
String country = "Korea";
여기서 age,country가 변수!
int, String은 변수 타입

변수 이름 규칙
문자, 숫자, _, $ 사용가능
변수 이름은 숫자로 시작 안됨
대소문자 구분
공백 사용 X
미리 예약된 이름(true, if, continue 등) 사용 X
! 한글 변수도 사용이 가능하지만 사용되지 않는 추세 !

변수 이름 표기법
- 카멜 표기법(가장 앞의 문자는 소문자로, 나머지 단어의 첫문자는 대문자로) - [변수, 함수의 이름 쓸 때 사용]
myName, zeroBase, iPhone 등
- 파스칼 표기법(각 문자의 첫문자를 대문자로) - [클래스 이름 쓸 때 사용]
MyName, ZeroBase, IPhone 등
- 스네이크 표기법 (snake_case) - [자바에선 잘 사용안함]
my_age, a_b_c

인텔리제이 특징
sout은 System.out.println을 자동완성해준다.
soutv라고 쓰면 가장 가까이 위에 있는 변수값을 출력하는 System.out.println을 자동완성해준다.

자료형
변수의 종류, 단위
숫자(Number) - 숫자 형태의 자료형 (정수, 실수, 2진수, 8진수, 16진수)
정수 - int, long
실수 - float, double - float 변수에 값을 넣을 때는 그 값의 맨 끝에 f을 써준다.
n진수 - int변수에 값 넣을 때 각각 0b(2진수), 0(8진수), 0x(16진수) 이걸 붙여준다.
부울(참or거짓)(Boolean) - true, false 둘 중 하나의 값을 가지는 자료형
문자(Character) - 문자('a', 'b', 'c') 형태의 자료형
문자열(String) - 문자들로 이루어진 문장(집합)

변수의 종류에 따라 담을 수 있는 데이터의 타입과 크기가 다르다.

int의 최소값 : Integer.MIN_VALUE
int의 최대값 : Integer.MAX_VALUE
이 값의 범위를 벗어나면 오버플로우가 발생한다! (최대값에 1을 더하면 최소값이 되고 최소값에 1을 빼면 최대값이 된다)
이런 문제를 해결하려고 할 때는 long을 사용하면 된다.
long longNum = (long)Integer.MAX_VALUE + 1;

문자열 메소드 : equals, indexOf, replace, substring, toUpperCase

equals
String s3 = "Hi";
String s4 = "H1";
s3.equals(s4); <= 값으니까 true값을 반환한다.
만약 다르면 false값을 반환한다.
== 을 써도 당장은 true가 되는데
만약 String s5 = new String("Hi");
s3 == s5 이러면 false값을 반환하게 된다.
그래서 equals를 쓰는 것이 좋다.

(개인적으로는 compareTo를 쓰는것이 더 좋았다. s3.compareTo(s4) == 0 이런식으로 조건문을 달면 서로 같은지 비교하는 거라서)

indexOf
String s6 = "Hello";
s6.indexOf('H'); <= 0번째 위치에서 시작해서 가장 먼저나오는 H의 위치를 찾아준다.
s6.indexOf("He"); <= 0번째 위치에서 시작해서 가장 먼저나오는 He의 위치를 찾아준다.
s6.indexOf("l", s6.indexOf("l") + 1); <= 0번째 위치에서 시작해서 가장 먼저 나오는 l의 위치를 찾은 다음 그 위치에서 +1한 위치에서 시작해 다음 l의 위치를 찾아준다.

replace
  String abc = "ttttt";
  System.out.println(abc.replace("tt", "vava"));
이러면 vavavavat라고 출력이된다.

substring
String abc = "abcdefghijklmnopqrstuvwxyz";
System.out.println(abc.substring(1, 4));
이러면 bcd라고 출력이 된다.
인덱스 1이상, 4미만 범위의 문자들을 출력해주기 때문이다.
(4를 안쓰면 시작점을 기준으로 맨 끝까지 출력해준다.)

StringBuffer : 문자열을 자주 추가하거나 변경할 때 사용하는 자료형
StringBuffer의 메소드 : append, insert, substring
배열 : 많은 수의 데이터를 담을 수 있는 자료형

int[] myArr1 = {1, 2, 3, 4, 5};
char[] myArr2 = {'a', 'b', 'c', 'd', 'e'};

myArr[0] (=1)
myArr2[2] (='c')
이런식으로 원하는 값을 쓸 수 있다. ([] 안에 쓰는 값(인덱스) 범위 : 0 ~ (배열 길이-1))

StringBuffer sb1 = new StringBuffer();
sb1.append("123");
sb1.append("456");
System.out.println(sb1);
123456이라고 출력이 된다.

그냥 String으로도 할 수는 있다.
String a = "12345";
String b = "56789";
a += b;
System.out.println(a);

다만 메모리의 효율성을 고려하면 이와 같은 작업은 StringBuffer로 하는 것이 좋다.

리스트 : 배열과 같이 여러 데이터를 담을 수 있는 자료형
값을 넣을 때 : 리스트변수이름.add(넣을 값);
값을 빼올 때 : 리스트변수이름.get(인덱스번호);
크기 구할 때 : 리스트변수이름.size();
값을 제거할 때 : 리스트변수이름.remove(인덱스번호);
리스트변수이름.remove(Integer.valueOf(없애고싶은정수형변수값));
리스트를 초기화 할 때 : 리스트변수이름.clear();
오름차순 정렬 : 리스트변수이름.sort(Comparator.naturalOrder());
내림차순 정렬 : 리스트변수이름.sort(Comparator.reverseOrder());

맵 : key, value 형태로 데이터를 저장하는 자료형

! 제네릭스 : 자료형을 명시적으로 지정
제한적일 수 있지만 안정성을 높여주고 형변환을 줄여준다. !
(<>안에 자료형을 지정해주는 걸 말한다.)
