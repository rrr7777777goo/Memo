배열
int[] arr1; <= 일차원 배열
int[][] arr2 = {{1,2,3}, {4,5,6}}; <= 2차원 배열 (다차원 배열)
int[][][] arr3 = {{{1,2},{3,4}},{{5,6},{7,8}}}; <= 3차원 배열 (다차원 배열)

배열은 이런식으로도 생성할 수 있다! 이러면 각 칸의 초기값은 0이다.
int[][] arr4 = new int[2][3];

클래스
객체를 정의하는 설계도, 붕어빵 틀 같은 역할

객체(Object) -> 사물, 실체
인스턴스(Instance) -> 클래스와 객체의 관계, 클래스로부터 객체를 선언(인스턴스 화), 어떤 객체는 어떤 클래스의 인스턴스

public class 클래스명 {
// 객체변수
// 메소드 (System.out.println의 println도 일종의 메소드)
// + 접근제어자
// + static
}

오버로딩 : 한 클래스 내에서 같은 이름의 메소드를 여러개 정의하는 것
조건
- 메소드의 이름이 같아야 한다
- 매개변수의 개수 또는 타입이 달라야 한다 (리턴타입의 차이로는 오버로딩이 되지 않는다)
public class 클래스명 {
   클래스명() {}
   클래스명(String name, String type) {
        구현 내용;
   }
}

접근제어자
클래스의 변수나 메소드의 접근에 제한을 두는 키워드
종류
private : 해당 클래스에서만 접근 가능
default : 해당 패키지 내에서만 접근 가능 (default는 아무것도 안쓴 그 상태를 의미한다.)
protected : 해당 패키지 및 상속받은 클래스에서 접근 가능
public : 어디서든 접근 가능

private클래스에 접근 가능한 클래스 : 해당 클래스
default클래스에 접근 가능한 클래스 : 해당 클래스, 동일 패키지의 일반 클래스, 동일 패키지의 자식 클래스
protected클래스에 접근 가능한 클래스 : 해당 클래스, 동일 패키지의 일반 클래스, 동일 패키지의 자식 클래스, 외부 패키지의 자식 클래스
public클래스에 접근 가능한 클래스 : 해당 클래스, 동일 패키지의 일반 클래스, 동일 패키지의 자식 클래스, 외부 패키지의 자식 클래스, 외부 패키지의 일반 클래스 (사실상 모든 클래스가 접근 가능)

static : 변수나 메소드의 특성을 바꾸는 키워드
메모리에 한 번만 할당됨 (공유되는 특성을 가지게 된다)

static 클래스 변수 : 해당 클래스의 각 객체들이 값을 공유
static 클래스 메소드 : 객체를 생성하지 않아도 호출 가능
